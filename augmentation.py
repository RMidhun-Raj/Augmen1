# -*- coding: utf-8 -*-
"""Augmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1njmZcKVDNkYMr2sNfPaBl_A6fQaL93e2
"""

# Step 1: Install Libraries
!pip install albumentations opencv-python-headless[ffmpeg]

# Step 2: Upload the Video to Colab
from google.colab import files

uploaded = files.upload()
video_path = list(uploaded.keys())[0]

# Step 3: Define the Augmentation Pipeline without Rotation or Flip
import albumentations as A
import random
import numpy as np

# Set a seed for reproducibility
seed = 42
random.seed(seed)
np.random.seed(seed)

# Define the augmentation pipeline without rotation or flip
transform = A.Compose([
    A.RandomBrightnessContrast(p=0.2),
    A.GaussNoise(p=0.2),
    A.RGBShift(p=0.5),
    A.RandomGamma(p=0.2)
])

# Step 4: Process the Video and Apply Consistent Augmentations to Generate Multiple Videos
import cv2

# Open the video file
cap = cv2.VideoCapture(video_path)

# Get video properties
fps = cap.get(cv2.CAP_PROP_FPS)
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Function to apply augmentations and save video
def apply_augmentation_and_save(seed, output_filename):
    # Reset the video capture to the start
    cap.set(cv2.CAP_PROP_POS_FRAMES, 0)

    # Define the codec and create VideoWriter object
    out = cv2.VideoWriter(output_filename, cv2.VideoWriter_fourcc(*'mp4v'), fps, (frame_width, frame_height))

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Convert frame to RGB
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Apply augmentations with consistent randomness
        random.seed(seed)
        np.random.seed(seed)
        augmented = transform(image=frame_rgb)['image']

        # Convert augmented frame back to BGR
        augmented_bgr = cv2.cvtColor(augmented, cv2.COLOR_RGB2BGR)

        # Write the augmented frame to the output video
        out.write(augmented_bgr)

    # Release the VideoWriter object
    out.release()

# Generate multiple augmented videos
for i in range(3):  # Change 3 to any number of videos you want to generate
    output_filename = f'augmented_video_{i+1}.mp4'
    apply_augmentation_and_save(seed + i, output_filename)
    print(f'Video {output_filename} created.')

# Step 5: Download the Augmented Videos
for i in range(3):  # Same number of videos as above
    output_filename = f'augmented_video_{i+1}.mp4'
    files.download(output_filename)